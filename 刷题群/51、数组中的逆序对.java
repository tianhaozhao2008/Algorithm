要求逆序对，最直观想到的是两层for循环遍历，时间复杂度O（n*n），空间O（1），
一般O（n*n）的复杂度都可以优化成n*logn的，于是联想到归并排序的思想。

先复习一下归并排序，就是先对前后部分排序后，新建一个数组，然后比较前后排序好的部分的头部大小，一个个填进新数组，
然后再把新数组中的数赋值到原始数组中。


首先，对于一个数组，比如[7,5,6,4,6,2]，那么要求逆序对，相当于求位于数组前一半的对、位于数组后一半的对，再加上横跨前半和后半的逆序对。

因此创建一个求逆序对数量的函数，参数是数组的下标，你先传入0和5，表示计算0到5之间的逆序对，那么它先递归调用自身，计算前部分和后部分的逆序对，
然后再算横跨前后部分的。如何算横跨前后部分的呢？这一步前部分是7，5，6，后部分是4，6，2，如果遍历的话就友成了O（n*n）了，因此这里假设前部分和
后部分已经排好序了，即5，6，7，和2，4，6，这时对它们归并，新成立一个数组，先比较2更小，于是把2放进去，然后4更小，把4放进去，然后5更小，把5放进
去的同时，看右边已经放进去几个了，此时放进去了2个说明有2个比5小，所以逆序对+2，然后是两个6放进去（如果一样就左边先放，不然会出错），逆序对再+2，
然后7放进去，逆序对再+3，最后得到横跨前后部分的逆序对有7个。

