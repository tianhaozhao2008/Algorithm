剑指 Offer 12. 矩阵中的路径  https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/

请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。
如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。
[["a","b","c","e"],
["s","f","c","s"],
["a","d","e","e"]]

但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。

示例 1：
输入：board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
输出：true

示例 2：
输入：board = [["a","b"],["c","d"]], word = "abcd"
输出：false

就是深度优先，分别对于二维数组的每个点，都执行深度优先算法，直到搜到就停止。
对于某个点的深度优先，就是分别对上下左右四个方向进行判断递归（主要是很多细节，比如开始深度优先前先标记一下，让之后的递归不能再遍历回到这个节点；
如果四个方向都返回false说明这个节点不行要退回，所以此时再去掉此节点的标记。）
